import logging
from langchain_core.tools import tool
from api_clients.currency_clients import convert_ids_to_currency_with_exchange
from services.stock_services import format_stock_data_for_agent
# from ai_agent.portfolio.portfolio_context_manager import PortfolioContext

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


@tool
def convert_currency_for_exchange(amount: float, from_currency: str, to_currency: str) -> str:
    """ Belirtilen miktarÄ± kaynak para biriminden hedef para birimine Ã§evirir.

    Parameters:
        amount (float): Ã‡evirilecek miktar (kullanÄ±cÄ±nÄ±n belirttiÄŸi tam miktar)
        from_currency (str): Kaynak para birimi kodu (USD, EUR, TRY vb.)
        to_currency (str): Hedef para birimi kodu (USD, EUR, TRY vb.)

    Return: Currency conversion data (schema: CURRENCY_FORMAT)
    +
    ğŸ’µ **GÃœNCEL DÃ–VÄ°Z KURU**
    ğŸ‡ºğŸ‡¸ [amount] [from_currency] = [result] [to_currency] ğŸ‡¹ğŸ‡·
    +
    ğŸ“ˆ **KUR ANALÄ°ZÄ°:** :
    - Kur seviyesi deÄŸerlendirmesi
    - Trend analizi
    - Ekonomik faktÃ¶rler
    - YatÄ±rÄ±mcÄ± iÃ§in Ã¶neriler
    """
    try:
        amount = float(amount)
        if amount <= 0:
            return "GeÃ§ersiz miktar - pozitif bir sayÄ± giriniz."

        # Para birimi kodlarÄ±nÄ± standardize et
        from_currency = str(from_currency).upper().strip()
        to_currency = str(to_currency).upper().strip()
        raw_result = convert_ids_to_currency_with_exchange(amount, from_currency, to_currency)

        if raw_result.get("success"):
            return f"GÃœNCEL DÃ–VÄ°Z KURU:\n ğŸ‡ºğŸ‡¸ {amount:,.2f} {from_currency} = {raw_result['result']} {to_currency} ğŸ‡¹ğŸ‡·"
        else:
            return f"GÃœNCEL DÃ–VÄ°Z KURU:\n {raw_result['result']}"

    except (ValueError, TypeError) as e:
        return f"GeÃ§ersiz giriÅŸ parametresi: {str(e)}"
    except Exception as e:
        return f"Ã‡evrim hatasÄ±: {e}"


@tool
def get_stock_data(symbol: str) -> str:
    """ Belirlenen hisse senedinin gÃ¼ncel fiyatÄ±nÄ± ve piyasa bilgilerini getirir.

    Parametre:
        symbol: Hisse senedi sembolÃ¼ (string, Ã¶rn: AAPL, AMZN, TSLA, GOOGL vb.)

    Returns: Raw conversion data (use STOCK_FORMAT)
    +
    ğŸ“ˆ **HISSE ANALÄ°ZÄ°**
    - GÃ¼ncel fiyat bilgileri
    - DeÄŸiÅŸim oranlarÄ±
    - Piyasa performansÄ±
    - KÄ±sa vadeli deÄŸerlendirme
    """

    try:
        logger.info(f"get_stock_data Ã§aÄŸrÄ±ldÄ±, symbol: {symbol}")

        if not symbol or not isinstance(symbol, str):
            return "GeÃ§ersiz hisse sembolÃ¼"

        result = format_stock_data_for_agent(symbol)

        # EÄŸer baÅŸarÄ±sÄ±zsa web aramasÄ± yap
        if any(keyword in result.lower() for keyword in ['hata', 'bulunamadÄ±', 'api_clients hatasÄ±']):
            return f"Hisse verisi alÄ±namadÄ±: {result}\n Web aramasÄ± Ã¶nerilir."

        return result

    except Exception as e:
        print(f"DEBUG: Hata oluÅŸtu: {str(e)}")
        return f"Hisse verisi alÄ±namadÄ±. Web aramasÄ± Ã¶nerilir: {e}"
